name: CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Checkout scripts repository
        uses: actions/checkout@v2
        with:
          repository: Danilmann/scripts
          path: scripts
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Проверка пути к скрипту
        run: |
          echo "Текущий путь:"
          pwd
          echo "Содержимое директории:"
          ls -l
          echo "Содержимое директории scripts:"
          ls -l scripts

      - name: Parse file for variables
        run: |
          chmod +x scripts/parse-file.sh
          ./scripts/parse-file.sh ./pars-file
          # Экспорт переменных в среду GitHub
          source ./GITHUB_ENV
          echo "REPO_NAME=${repository_name}" >> $GITHUB_ENV
          echo "ENVIRONMENT=${environment}" >> $GITHUB_ENV
          echo "APPLICATION=${application}" >> $GITHUB_ENV
          echo "TAG=${tag}" >> $GITHUB_ENV
          echo "Проверка экспорта переменных:"
          echo "REPO_NAME=${repository_name}"
          echo "ENVIRONMENT=${environment}"
          echo "APPLICATION=${application}"
          echo "TAG=${tag}"

      - name: Log all environment variables
        run: printenv | sort

      - name: Build Docker image
        run: |
          echo "Building Docker image for repository: my-repo, application: my-app"
          docker build -t ${{ secrets.DOCKER_USERNAME }}/my-repo/my-app:${{ env.TAG }} .

      - name: Login to Docker Registry
        run: |
          echo ${{ secrets.DOCKER_PASSWORD }} | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin

      - name: Push Docker image
        run: |
          # Добавляем два тега: ${env.TAG} и latest
          docker tag ${{ secrets.DOCKER_USERNAME }}/my-repo/my-app:${{ env.TAG }} ${{ secrets.DOCKER_USERNAME }}/my-repo/my-app:latest
          # Пушим образ с тегом, соответствующим переменной TAG
          docker push ${{ secrets.DOCKER_USERNAME }}/my-repo/my-app:${{ env.TAG }}
          # Пушим образ с тегом latest
          docker push ${{ secrets.DOCKER_USERNAME }}/my-repo/my-app:latest

      - name: Pull Docker image
        run: |
          echo "Pulling Docker image for my-app with tag: ${{ env.TAG }}"
          docker pull ${{ secrets.DOCKER_USERNAME }}/my-repo/my-app:${{ env.TAG }}

      - name: Deploy Docker container
        run: |
          # Проверяем наличие контейнера и удаляем, если он существует
          docker ps -a -q --filter "name=my-app" | grep -q . && docker stop my-app && docker rm my-app || true
          # Запускаем контейнер с нужным образом
          docker run -d --name my-app -p 3000:3000 ${{ secrets.DOCKER_USERNAME }}/my-repo/my-app:${{ env.TAG }}
          # Проверяем доступность контейнера
          sleep 10
          curl --fail http://localhost:3000 || (echo "Application is not accessible on port 3000" && exit 1)
      

      - name: Проверка доступности контейнера
        run: |
          echo "Проверка доступности приложения на порту 3000"
          sleep 10  
          curl --fail http://localhost:3000 || (echo "Приложение не доступно на порту 3000" && exit 1)